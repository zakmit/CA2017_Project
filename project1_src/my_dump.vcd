$date
	Thu Dec 07 20:05:28 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var reg 1 # Start $end
$var integer 32 $ counter [31:0] $end
$var integer 32 % flush [31:0] $end
$var integer 32 & i [31:0] $end
$var integer 32 ' outfile [31:0] $end
$var integer 32 ( stall [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var wire 32 ) registerout2 [31:0] $end
$var wire 32 * registerout1 [31:0] $end
$var wire 32 + inst_addr [31:0] $end
$var wire 32 , inst [31:0] $end
$var wire 32 - SIGN_EXTEND_DATA_O [31:0] $end
$var wire 32 . SHIFT_LEFT_2_O [31:0] $end
$var wire 32 / SHIFT_LEFT_0_27__28_31_O [31:0] $end
$var wire 8 0 MUX8_MUX8_O [7:0] $end
$var wire 32 1 MUX7_DATA_O [31:0] $end
$var wire 32 2 MUX6_DATA_O [31:0] $end
$var wire 5 3 MUX3_DATA_O [4:0] $end
$var wire 32 4 MUX32_MUX5_O [31:0] $end
$var wire 32 5 MUX32_MUX4_O [31:0] $end
$var wire 32 6 MUX32_MUX2_O [31:0] $end
$var wire 32 7 MUX32_MUX1_O [31:0] $end
$var wire 2 8 MEMWB_WB_O [1:0] $end
$var wire 32 9 MEMWB_READ_DATA_O [31:0] $end
$var wire 5 : MEMWB_MUX3_O [4:0] $end
$var wire 32 ; MEMWB_ALU_O [31:0] $end
$var wire 32 < IF_ID_PC [31:0] $end
$var wire 32 = IF_ID_INST [31:0] $end
$var wire 2 > IDEX_WB_O [1:0] $end
$var wire 32 ? IDEX_SIGNEXTEND_O [31:0] $end
$var wire 5 @ IDEX_RT_O [4:0] $end
$var wire 5 A IDEX_RS_O [4:0] $end
$var wire 5 B IDEX_RD_O [4:0] $end
$var wire 2 C IDEX_M_O [1:0] $end
$var wire 4 D IDEX_EX_O [3:0] $end
$var wire 32 E IDEX_DATA2_O [31:0] $end
$var wire 32 F IDEX_DATA1_O [31:0] $end
$var wire 1 G HD_PC_O $end
$var wire 1 H HD_MUX8_O $end
$var wire 1 I HD_IFID_O $end
$var wire 2 J FORWARDUNIT_MUX7_O [1:0] $end
$var wire 2 K FORWARDUNIT_MUX6_O [1:0] $end
$var wire 2 L EXMEM_WB_O [1:0] $end
$var wire 2 M EXMEM_M_O [1:0] $end
$var wire 32 N EXMEM_MUX7_O [31:0] $end
$var wire 5 O EXMEM_MUX3_O [4:0] $end
$var wire 32 P EXMEM_ALU_O [31:0] $end
$var wire 1 Q EQ_DATA_O $end
$var wire 32 R DATAMEMORY_READ_DATA_O [31:0] $end
$var wire 8 S CONTROL_MUX8_O [7:0] $end
$var wire 1 T CONTROL_JUMP_O $end
$var wire 1 U CONTROL_BRANCH_O $end
$var wire 1 V ALU_ZERO_O $end
$var wire 32 W ALU_DATA_O [31:0] $end
$var wire 3 X ALU_CONTROL_ALUCTRL_O [2:0] $end
$var wire 32 Y ADD_PC_DATA_O [31:0] $end
$var wire 32 Z ADDER_ADD_O [31:0] $end
$scope module ADD $end
$var wire 32 [ data_o [31:0] $end
$var wire 32 \ data2_in [31:0] $end
$var wire 32 ] data1_in [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 ^ data2_i [31:0] $end
$var wire 32 _ data1_i [31:0] $end
$var wire 3 ` ALUCtrl_i [2:0] $end
$var reg 1 V Zero_o $end
$var reg 32 a data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 2 b ALUOp_i [1:0] $end
$var wire 6 c funct_i [5:0] $end
$var reg 3 d ALUCtrl_o [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 e data2_in [31:0] $end
$var wire 32 f data_o [31:0] $end
$var wire 32 g data1_in [31:0] $end
$upscope $end
$scope module Control $end
$var wire 6 h Op_i [5:0] $end
$var wire 8 i mux8_o [7:0] $end
$var wire 1 T jump_o $end
$var wire 1 U branch_o $end
$var reg 10 j out [9:0] $end
$upscope $end
$scope module DATAMEMORY $end
$var wire 1 k exmem_m_MR_i $end
$var wire 1 l exmem_m_MW_i $end
$var wire 32 m read_data_o [31:0] $end
$var wire 32 n exmem_mux7_i [31:0] $end
$var wire 32 o exmem_alu_i [31:0] $end
$upscope $end
$scope module EQ $end
$var wire 32 p data2_i [31:0] $end
$var wire 32 q data1_i [31:0] $end
$var reg 1 Q data_o $end
$upscope $end
$scope module EXMEM $end
$var wire 32 r alu_i [31:0] $end
$var wire 1 ! clk_i $end
$var wire 2 s wb_i [1:0] $end
$var wire 32 t mux7_i [31:0] $end
$var wire 5 u mux3_i [4:0] $end
$var wire 2 v m_i [1:0] $end
$var reg 32 w alu_o [31:0] $end
$var reg 2 x m_o [1:0] $end
$var reg 5 y mux3_o [4:0] $end
$var reg 32 z mux7_o [31:0] $end
$var reg 2 { wb_o [1:0] $end
$upscope $end
$scope module FORWARDUNIT $end
$var wire 5 | exmem_mux3_i [4:0] $end
$var wire 1 } exmem_wb_i $end
$var wire 1 ~ memwb_wb_i $end
$var wire 5 !" memwb_mux3_i [4:0] $end
$var wire 5 "" idex_rt_i [4:0] $end
$var wire 5 #" idex_rs_i [4:0] $end
$var reg 2 $" to_mux6_o [1:0] $end
$var reg 2 %" to_mux7_o [1:0] $end
$upscope $end
$scope module HD $end
$var wire 1 &" HD $end
$var wire 1 '" idex_m_i $end
$var wire 1 I ifid_o $end
$var wire 1 H mux8_o $end
$var wire 1 G pc_o $end
$var wire 32 (" ifid_inst_i [31:0] $end
$var wire 5 )" idex_rt_i [4:0] $end
$var wire 1 *" RT $end
$var wire 1 +" RS $end
$upscope $end
$scope module IDEX $end
$var wire 1 ! clk_i $end
$var wire 4 ," ex_i [3:0] $end
$var wire 2 -" m_i [1:0] $end
$var wire 5 ." rd_i [4:0] $end
$var wire 5 /" rs_i [4:0] $end
$var wire 5 0" rt_i [4:0] $end
$var wire 2 1" wb_i [1:0] $end
$var wire 32 2" signextend_i [31:0] $end
$var wire 32 3" data2_i [31:0] $end
$var wire 32 4" data1_i [31:0] $end
$var wire 32 5" add_pc_i [31:0] $end
$var reg 32 6" data1_o [31:0] $end
$var reg 32 7" data2_o [31:0] $end
$var reg 4 8" ex_o [3:0] $end
$var reg 2 9" m_o [1:0] $end
$var reg 5 :" rd_o [4:0] $end
$var reg 5 ;" rs_o [4:0] $end
$var reg 5 <" rt_o [4:0] $end
$var reg 32 =" signextend_o [31:0] $end
$var reg 2 >" wb_o [1:0] $end
$upscope $end
$scope module IFID $end
$var wire 32 ?" add_pc_i [31:0] $end
$var wire 1 ! clk_i $end
$var wire 1 @" flush_i $end
$var wire 1 I hazard_i $end
$var wire 32 A" instruction_i [31:0] $end
$var reg 32 B" inst_o [31:0] $end
$var reg 32 C" pc_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 D" instr_o [31:0] $end
$var wire 32 E" addr_i [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 1 ! clk_i $end
$var wire 32 F" data_memory_readdata_i [31:0] $end
$var wire 32 G" exmem_alu_i [31:0] $end
$var wire 5 H" exmem_mux3_i [4:0] $end
$var wire 2 I" exmem_wb_i [1:0] $end
$var reg 32 J" alu_o [31:0] $end
$var reg 5 K" mux3_o [4:0] $end
$var reg 32 L" read_data_o [31:0] $end
$var reg 2 M" wb_o [1:0] $end
$upscope $end
$scope module MUX1 $end
$var wire 32 N" data1_i [31:0] $end
$var wire 32 O" data2_i [31:0] $end
$var wire 1 P" select_i $end
$var wire 32 Q" data_o [31:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 32 R" data1_i [31:0] $end
$var wire 32 S" data2_i [31:0] $end
$var wire 1 T select_i $end
$var wire 32 T" data_o [31:0] $end
$upscope $end
$scope module MUX3 $end
$var wire 5 U" data1_i [4:0] $end
$var wire 5 V" data2_i [4:0] $end
$var wire 1 W" select_i $end
$var wire 5 X" data_o [4:0] $end
$upscope $end
$scope module MUX4 $end
$var wire 32 Y" data2_i [31:0] $end
$var wire 1 Z" select_i $end
$var wire 32 [" data_o [31:0] $end
$var wire 32 \" data1_i [31:0] $end
$upscope $end
$scope module MUX5 $end
$var wire 32 ]" data1_i [31:0] $end
$var wire 32 ^" data2_i [31:0] $end
$var wire 1 _" select_i $end
$var wire 32 `" data_o [31:0] $end
$upscope $end
$scope module MUX6 $end
$var wire 32 a" data_i [31:0] $end
$var wire 32 b" data_o [31:0] $end
$var wire 32 c" exmem_i [31:0] $end
$var wire 32 d" memwb_i [31:0] $end
$var wire 2 e" select_i [1:0] $end
$var reg 32 f" out [31:0] $end
$upscope $end
$scope module MUX7 $end
$var wire 32 g" data_i [31:0] $end
$var wire 32 h" exmem_i [31:0] $end
$var wire 32 i" memwb_i [31:0] $end
$var wire 2 j" select_i [1:0] $end
$var wire 32 k" data_o [31:0] $end
$var reg 32 l" out [31:0] $end
$upscope $end
$scope module MUX8 $end
$var wire 8 m" data1_i [7:0] $end
$var wire 8 n" data2_i [7:0] $end
$var wire 1 H select_i $end
$var wire 8 o" data_o [7:0] $end
$var reg 8 p" out [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 1 G hazard_i $end
$var wire 32 q" pc_i [31:0] $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var reg 32 r" pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 s" RDaddr_i [4:0] $end
$var wire 32 t" RDdata_i [31:0] $end
$var wire 5 u" RSaddr_i [4:0] $end
$var wire 32 v" RSdata_o [31:0] $end
$var wire 5 w" RTaddr_i [4:0] $end
$var wire 32 x" RTdata_o [31:0] $end
$var wire 1 y" RegWrite_i $end
$var wire 1 ! clk_i $end
$upscope $end
$scope module Shift_left_0_27__28_31 $end
$var wire 26 z" data_i [25:0] $end
$var wire 28 {" data_o [27:0] $end
$upscope $end
$scope module Shift_left_2 $end
$var wire 32 |" data_o [31:0] $end
$var wire 32 }" data_i [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 ~" data_i [15:0] $end
$var wire 32 !# data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !#
bx ~"
bx }"
bx |"
bx00 {"
bx z"
xy"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
b0 r"
bx q"
bx p"
bx o"
b0 n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
x_"
bx ^"
bx ]"
bx \"
bx ["
xZ"
bx Y"
bx X"
xW"
bx V"
bx U"
bx T"
bx00 S"
bx R"
bx Q"
xP"
bx O"
b100 N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
b0 E"
b100000000001000000000000000000 D"
bx C"
bx B"
b100000000001000000000000000000 A"
x@"
b100 ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
x+"
x*"
bx )"
bx ("
x'"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
x~
x}
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
xl
xk
bx j
bx i
bx h
b0 g
b100 f
b100 e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
b100 Y
bx X
bx W
xV
xU
xT
bx S
bx R
xQ
bx P
bx O
bx N
bx M
bx L
bx K
bx J
xI
xH
xG
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bzxxxxxxxxxxxxxxxxxxxxxxxxxx00 /
bx .
bx -
b100000000001000000000000000000 ,
b0 +
bx *
bx )
b0 (
b11 '
b100000 &
b0 %
b0 $
0#
0"
1!
$end
#5
b111 ,"
b0 -"
b10 1"
0@"
b10000111 0
b10000111 o"
b10000111 p"
0P"
b100 6
b100 T"
b100 q"
b100 7
b100 Q"
b100 R"
0T
0U
b10000111 S
b10000111 i
b10000111 m"
1Q
b0 S"
b0 Z
b0 [
b0 O"
b0 .
b0 ]
b0 |"
b10000111 j
b0 )
b0 p
b0 3"
b0 x"
b0 w"
b0 *
b0 q
b0 4"
b0 v"
b0 u"
bz0000000000000000000000000000 /
b0 {"
b0 z"
b0 -
b0 2"
b0 }"
b0 !#
b0 ~"
b0 h
b0 ."
b0 0"
b0 /"
b0 =
b0 ("
b0 B"
b0 <
b0 \
b0 5"
b0 C"
#10
b0 ,"
b0 1"
b0 0
b0 o"
b0 p"
0G
0H
0I
1*"
1+"
1V
b0 W
b0 a
b0 r
b10 X
b10 `
b10 d
0&"
b0 3
b0 u
b0 X"
b0 J
b0 %"
b0 j"
b0 K
b0 $"
b0 e"
b0 5
b0 ^
b0 ["
b0 c
b0 1
b0 t
b0 \"
b0 k"
b0 l"
b0 2
b0 _
b0 b"
b0 f"
b0 b
0Z"
0W"
0'"
b0 B
b0 :"
b0 V"
b0 @
b0 ""
b0 )"
b0 <"
b0 U"
b0 A
b0 #"
b0 ;"
b0 ?
b0 ="
b0 Y"
b0 E
b0 7"
b0 g"
b0 F
b0 6"
b0 a"
b0 D
b0 8"
b0 C
b0 v
b0 9"
b0 >
b0 s
b0 >"
#12
1#
1"
#15
0k
0l
0}
b0 O
b0 y
b0 |
b0 H"
b0 N
b0 n
b0 z
b101 R
b101 m
b101 F"
b0 P
b0 o
b0 w
b0 G"
b0 c"
b0 h"
b0 M
b0 x
b0 L
b0 {
b0 I"
#20
b0 4
b0 `"
b0 d"
b0 i"
b0 t"
0y"
0_"
0~
b0 :
b0 !"
b0 K"
b0 s"
b0 9
b0 L"
b0 ^"
b0 ;
b0 J"
b0 ]"
b0 8
b0 M"
#25
0!
#50
b101 9
b101 L"
b101 ^"
b1 $
b1 (
1!
#75
0!
#100
b10 $
b10 (
1!
#125
0!
#150
b11 $
b11 (
1!
#175
0!
#200
b100 $
b100 (
1!
#225
0!
#250
b101 $
b101 (
1!
#275
0!
#300
b110 $
b110 (
1!
#325
0!
#350
b111 $
b111 (
1!
#375
0!
#400
b1000 $
b1000 (
1!
#425
0!
#450
b1001 $
b1001 (
1!
#475
0!
#500
b1010 $
b1010 (
1!
#525
0!
#550
b1011 $
b1011 (
1!
#575
0!
#600
b1100 $
b1100 (
1!
#625
0!
#650
b1101 $
b1101 (
1!
#675
0!
#700
b1110 $
b1110 (
1!
#725
0!
#750
b1111 $
b1111 (
1!
#775
0!
#800
b10000 $
b10000 (
1!
#825
0!
#850
b10001 $
b10001 (
1!
#875
0!
#900
b10010 $
b10010 (
1!
#925
0!
#950
b10011 $
b10011 (
1!
#975
0!
#1000
b10100 $
b10100 (
1!
#1025
0!
#1050
b10101 $
b10101 (
1!
#1075
0!
#1100
b10110 $
b10110 (
1!
#1125
0!
#1150
b10111 $
b10111 (
1!
#1175
0!
#1200
b11000 $
b11000 (
1!
#1225
0!
#1250
b11001 $
b11001 (
1!
#1275
0!
#1300
b11010 $
b11010 (
1!
#1325
0!
#1350
b11011 $
b11011 (
1!
#1375
0!
#1400
b11100 $
b11100 (
1!
#1425
0!
#1450
b11101 $
b11101 (
1!
#1475
0!
#1500
b11110 $
b11110 (
1!
#1525
0!
#1550
