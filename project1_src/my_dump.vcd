$date
	Thu Dec  7 21:28:03 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var reg 1 # Start $end
$var integer 32 $ counter [31:0] $end
$var integer 32 % flush [31:0] $end
$var integer 32 & i [31:0] $end
$var integer 32 ' outfile [31:0] $end
$var integer 32 ( stall [31:0] $end
$scope module CPU $end
$var wire 32 ) ADDER_ADD_O [31:0] $end
$var wire 32 * ADD_PC_DATA_O [31:0] $end
$var wire 3 + ALU_CONTROL_ALUCTRL_O [2:0] $end
$var wire 32 , ALU_DATA_O [31:0] $end
$var wire 1 - ALU_ZERO_O $end
$var wire 1 . CONTROL_BRANCH_O $end
$var wire 1 / CONTROL_JUMP_O $end
$var wire 8 0 CONTROL_MUX8_O [7:0] $end
$var wire 32 1 DATAMEMORY_READ_DATA_O [31:0] $end
$var wire 1 2 EQ_DATA_O $end
$var wire 32 3 EXMEM_ALU_O [31:0] $end
$var wire 5 4 EXMEM_MUX3_O [4:0] $end
$var wire 32 5 EXMEM_MUX7_O [31:0] $end
$var wire 2 6 EXMEM_M_O [1:0] $end
$var wire 2 7 EXMEM_WB_O [1:0] $end
$var wire 2 8 FORWARDUNIT_MUX6_O [1:0] $end
$var wire 2 9 FORWARDUNIT_MUX7_O [1:0] $end
$var wire 1 : HD_IFID_O $end
$var wire 1 ; HD_MUX8_O $end
$var wire 1 < HD_PC_O $end
$var wire 32 = IDEX_DATA1_O [31:0] $end
$var wire 32 > IDEX_DATA2_O [31:0] $end
$var wire 4 ? IDEX_EX_O [3:0] $end
$var wire 2 @ IDEX_M_O [1:0] $end
$var wire 5 A IDEX_RD_O [4:0] $end
$var wire 5 B IDEX_RS_O [4:0] $end
$var wire 5 C IDEX_RT_O [4:0] $end
$var wire 32 D IDEX_SIGNEXTEND_O [31:0] $end
$var wire 2 E IDEX_WB_O [1:0] $end
$var wire 32 F IF_ID_INST [31:0] $end
$var wire 32 G IF_ID_PC [31:0] $end
$var wire 32 H MEMWB_ALU_O [31:0] $end
$var wire 5 I MEMWB_MUX3_O [4:0] $end
$var wire 32 J MEMWB_READ_DATA_O [31:0] $end
$var wire 2 K MEMWB_WB_O [1:0] $end
$var wire 32 L MUX32_MUX1_O [31:0] $end
$var wire 32 M MUX32_MUX2_O [31:0] $end
$var wire 32 N MUX32_MUX4_O [31:0] $end
$var wire 32 O MUX32_MUX5_O [31:0] $end
$var wire 5 P MUX3_DATA_O [4:0] $end
$var wire 32 Q MUX6_DATA_O [31:0] $end
$var wire 32 R MUX7_DATA_O [31:0] $end
$var wire 8 S MUX8_MUX8_O [7:0] $end
$var wire 32 T SHIFT_LEFT_0_27__28_31_O [31:0] $end
$var wire 32 U SHIFT_LEFT_2_O [31:0] $end
$var wire 32 V SIGN_EXTEND_DATA_O [31:0] $end
$var wire 1 W clk_i $end
$var wire 32 X inst [31:0] $end
$var wire 32 Y inst_addr [31:0] $end
$var wire 32 Z registerout1 [31:0] $end
$var wire 32 [ registerout2 [31:0] $end
$var wire 1 \ rst_i $end
$var wire 1 ] start_i $end
$scope module IFID $end
$var wire 32 ^ add_pc_i [31:0] $end
$var wire 1 W clk_i $end
$var wire 1 _ flush_i $end
$var wire 1 : hazard_i $end
$var wire 32 ` instruction_i [31:0] $end
$var reg 32 a inst_o [31:0] $end
$var reg 32 b pc_o [31:0] $end
$upscope $end
$scope module IDEX $end
$var wire 32 c add_pc_i [31:0] $end
$var wire 1 W clk_i $end
$var wire 32 d data1_i [31:0] $end
$var wire 32 e data2_i [31:0] $end
$var wire 4 f ex_i [3:0] $end
$var wire 2 g m_i [1:0] $end
$var wire 5 h rd_i [4:0] $end
$var wire 5 i rs_i [4:0] $end
$var wire 5 j rt_i [4:0] $end
$var wire 32 k signextend_i [31:0] $end
$var wire 2 l wb_i [1:0] $end
$var reg 32 m data1_o [31:0] $end
$var reg 32 n data2_o [31:0] $end
$var reg 4 o ex_o [3:0] $end
$var reg 2 p m_o [1:0] $end
$var reg 5 q rd_o [4:0] $end
$var reg 5 r rs_o [4:0] $end
$var reg 5 s rt_o [4:0] $end
$var reg 32 t signextend_o [31:0] $end
$var reg 2 u wb_o [1:0] $end
$upscope $end
$scope module EXMEM $end
$var wire 32 v alu_i [31:0] $end
$var wire 1 W clk_i $end
$var wire 2 w m_i [1:0] $end
$var wire 5 x mux3_i [4:0] $end
$var wire 32 y mux7_i [31:0] $end
$var wire 2 z wb_i [1:0] $end
$var reg 32 { alu_o [31:0] $end
$var reg 2 | m_o [1:0] $end
$var reg 5 } mux3_o [4:0] $end
$var reg 32 ~ mux7_o [31:0] $end
$var reg 2 !" wb_o [1:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 1 W clk_i $end
$var wire 32 "" data_memory_readdata_i [31:0] $end
$var wire 32 #" exmem_alu_i [31:0] $end
$var wire 5 $" exmem_mux3_i [4:0] $end
$var wire 2 %" exmem_wb_i [1:0] $end
$var reg 32 &" alu_o [31:0] $end
$var reg 5 '" mux3_o [4:0] $end
$var reg 32 (" read_data_o [31:0] $end
$var reg 2 )" wb_o [1:0] $end
$upscope $end
$scope module DATAMEMORY $end
$var wire 32 *" exmem_alu_i [31:0] $end
$var wire 1 +" exmem_m_MR_i $end
$var wire 1 ," exmem_m_MW_i $end
$var wire 32 -" exmem_mux7_i [31:0] $end
$var wire 32 ." read_data_o [31:0] $end
$upscope $end
$scope module FORWARDUNIT $end
$var wire 5 /" exmem_mux3_i [4:0] $end
$var wire 1 0" exmem_wb_i $end
$var wire 5 1" idex_rs_i [4:0] $end
$var wire 5 2" idex_rt_i [4:0] $end
$var wire 5 3" memwb_mux3_i [4:0] $end
$var wire 1 4" memwb_wb_i $end
$var reg 2 5" to_mux6_o [1:0] $end
$var reg 2 6" to_mux7_o [1:0] $end
$upscope $end
$scope module HD $end
$var wire 1 7" HD $end
$var wire 1 8" RS $end
$var wire 1 9" RT $end
$var wire 1 :" idex_m_i $end
$var wire 5 ;" idex_rt_i [4:0] $end
$var wire 32 <" ifid_inst_i [31:0] $end
$var wire 1 : ifid_o $end
$var wire 1 ; mux8_o $end
$var wire 1 < pc_o $end
$upscope $end
$scope module Control $end
$var wire 6 =" Op_i [5:0] $end
$var wire 1 . branch_o $end
$var wire 1 / jump_o $end
$var wire 8 >" mux8_o [7:0] $end
$var reg 10 ?" out [9:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 @" data1_in [31:0] $end
$var wire 32 A" data2_in [31:0] $end
$var wire 32 B" data_o [31:0] $end
$upscope $end
$scope module ADD $end
$var wire 32 C" data1_in [31:0] $end
$var wire 32 D" data2_in [31:0] $end
$var wire 32 E" data_o [31:0] $end
$upscope $end
$scope module MUX1 $end
$var wire 32 F" data1_i [31:0] $end
$var wire 32 G" data2_i [31:0] $end
$var wire 32 H" data_o [31:0] $end
$var wire 1 I" select_i $end
$upscope $end
$scope module MUX2 $end
$var wire 32 J" data1_i [31:0] $end
$var wire 32 K" data2_i [31:0] $end
$var wire 32 L" data_o [31:0] $end
$var wire 1 / select_i $end
$upscope $end
$scope module MUX3 $end
$var wire 5 M" data1_i [4:0] $end
$var wire 5 N" data2_i [4:0] $end
$var wire 5 O" data_o [4:0] $end
$var wire 1 P" select_i $end
$upscope $end
$scope module MUX4 $end
$var wire 32 Q" data1_i [31:0] $end
$var wire 32 R" data2_i [31:0] $end
$var wire 32 S" data_o [31:0] $end
$var wire 1 T" select_i $end
$upscope $end
$scope module MUX5 $end
$var wire 32 U" data1_i [31:0] $end
$var wire 32 V" data2_i [31:0] $end
$var wire 32 W" data_o [31:0] $end
$var wire 1 X" select_i $end
$upscope $end
$scope module MUX6 $end
$var wire 32 Y" data_i [31:0] $end
$var wire 32 Z" data_o [31:0] $end
$var wire 32 [" exmem_i [31:0] $end
$var wire 32 \" memwb_i [31:0] $end
$var wire 2 ]" select_i [1:0] $end
$var reg 32 ^" out [31:0] $end
$upscope $end
$scope module MUX7 $end
$var wire 32 _" data_i [31:0] $end
$var wire 32 `" data_o [31:0] $end
$var wire 32 a" exmem_i [31:0] $end
$var wire 32 b" memwb_i [31:0] $end
$var wire 2 c" select_i [1:0] $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module MUX8 $end
$var wire 8 e" data1_i [7:0] $end
$var wire 8 f" data2_i [7:0] $end
$var wire 8 g" data_o [7:0] $end
$var wire 1 ; select_i $end
$var reg 8 h" out [7:0] $end
$upscope $end
$scope module EQ $end
$var wire 32 i" data1_i [31:0] $end
$var wire 32 j" data2_i [31:0] $end
$var reg 1 k" data_o $end
$upscope $end
$scope module Shift_left_2 $end
$var wire 32 l" data_i [31:0] $end
$var wire 32 m" data_o [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 n" data_i [15:0] $end
$var wire 32 o" data_o [31:0] $end
$upscope $end
$scope module Shift_left_0_27__28_31 $end
$var wire 26 p" data_i [25:0] $end
$var wire 28 q" data_o [27:0] $end
$upscope $end
$scope module PC $end
$var wire 1 W clk_i $end
$var wire 1 < hazard_i $end
$var wire 32 r" pc_i [31:0] $end
$var wire 1 \ rst_i $end
$var wire 1 ] start_i $end
$var reg 32 s" pc_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 t" addr_i [31:0] $end
$var wire 32 u" instr_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 v" RDaddr_i [4:0] $end
$var wire 32 w" RDdata_i [31:0] $end
$var wire 5 x" RSaddr_i [4:0] $end
$var wire 32 y" RSdata_o [31:0] $end
$var wire 5 z" RTaddr_i [4:0] $end
$var wire 32 {" RTdata_o [31:0] $end
$var wire 1 |" RegWrite_i $end
$var wire 1 W clk_i $end
$upscope $end
$scope module ALU $end
$var wire 3 }" ALUCtrl_i [2:0] $end
$var wire 32 ~" data1_i [31:0] $end
$var wire 32 !# data2_i [31:0] $end
$var reg 1 "# Zero_o $end
$var reg 32 ## data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 2 $# ALUOp_i [1:0] $end
$var wire 6 %# funct_i [5:0] $end
$var reg 3 &# ALUCtrl_o [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 &#
bx %#
bx $#
bx ##
0"#
bx !#
bx ~"
b10 }"
x|"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
b100000000100000 u"
b0 t"
b0 s"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 r"
bx00 q"
bx p"
bx o"
bx n"
bx m"
bx l"
0k"
bx j"
bx i"
b0 h"
b0 g"
b0 f"
b0 e"
bx d"
b0 c"
bx b"
bx a"
bx `"
bx _"
bx ^"
b0 ]"
bx \"
bx ["
bx Z"
bx Y"
xX"
bx W"
bx V"
bx U"
xT"
bx S"
bx R"
bx Q"
xP"
bx O"
bx N"
bx M"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 L"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 K"
b100 J"
0I"
b100 H"
bx G"
b100 F"
bx E"
bx D"
bx C"
b100 B"
b100 A"
b0 @"
b1000000000 ?"
b0 >"
bx ="
bx <"
bx ;"
x:"
x9"
x8"
x7"
b0 6"
bx 5"
x4"
bx 3"
bx 2"
bx 1"
x0"
bx /"
bx ."
bx -"
x,"
x+"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
b0 l
bx k
bx j
bx i
bx h
b0 g
b0 f
bx e
bx d
bx c
bx b
bx a
b100000000100000 `
1_
b100 ^
0]
0\
bx [
bx Z
b0 Y
b100000000100000 X
1W
bx V
bx U
bzxxxxxxxxxxxxxxxxxxxxxxxxxx00 T
b0 S
bx R
bx Q
bx P
bx O
bx N
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 M
b100 L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
x<
x;
x:
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
02
bx 1
b0 0
1/
0.
0-
bx ,
b10 +
b100 *
bx )
b0 (
b11 '
b100000 &
b0 %
b0 $
0#
0"
1!
$end
#5
b111 f
b10 l
0_
b10000111 h"
b10000111 S
b10000111 g"
b100 M
b100 L"
b100 r"
0/
b10000111 0
b10000111 >"
b10000111 e"
1k"
12
b0 K"
b0 )
b0 E"
b0 G"
b0 U
b0 C"
b0 m"
b10000111 ?"
b0 z"
b0 [
b0 e
b0 j"
b0 {"
b0 x"
b0 Z
b0 d
b0 i"
b0 y"
bz0000000000000000000000000000 T
b0 q"
b0 p"
b0 n"
b0 V
b0 k
b0 l"
b0 o"
b0 ="
b0 h
b0 j
b0 i
b0 a
b0 F
b0 <"
b0 b
b0 G
b0 c
b0 D"
#10
1<
1;
1:
1"#
1-
b0 ##
b0 ,
b0 v
17"
18"
19"
b0 P
b0 x
b0 O"
b0 N
b0 S"
b0 !#
b0 %#
b0 d"
b0 R
b0 y
b0 Q"
b0 `"
b0 ^"
b0 Q
b0 Z"
b0 ~"
b0 $#
0T"
0P"
0:"
b0 q
b0 A
b0 N"
b0 s
b0 C
b0 2"
b0 ;"
b0 M"
b0 r
b0 B
b0 1"
b0 t
b0 D
b0 R"
b0 n
b0 >
b0 _"
b0 m
b0 =
b0 Y"
b0 o
b0 ?
b0 p
b0 @
b0 w
b0 u
b0 E
b0 z
#12
1#
1]
1"
1\
#15
0+"
0,"
00"
b0 }
b0 4
b0 $"
b0 /"
b0 ~
b0 5
b0 -"
b0 {
b101 1
b101 ""
b101 ."
b0 3
b0 #"
b0 *"
b0 ["
b0 a"
b0 |
b0 6
b0 !"
b0 7
b0 %"
#20
b0 O
b0 W"
b0 \"
b0 b"
b0 w"
0|"
0X"
04"
b0 '"
b0 I
b0 3"
b0 v"
b0 ("
b0 J
b0 V"
b0 &"
b0 H
b0 U"
b0 )"
b0 K
#25
0!
0W
#50
b10000000010000000 K"
b1000 M
b1000 L"
b1000 r"
b11 $#
1P"
bz0000000000010000000010000000 T
b10000000010000000 q"
b100000000100000 p"
b100000000100000 n"
b10000000010000000 U
b10000000010000000 C"
b10000000010000000 m"
b100000000100000 V
b100000000100000 k
b100000000100000 l"
b100000000100000 o"
b1000 h
b100000000010010000000000001010 X
b100000000010010000000000001010 `
b100000000010010000000000001010 u"
b1000 L
b1000 H"
b1000 J"
b101 ("
b101 J
b101 V"
b111 o
b111 ?
b10 u
b10 E
b10 z
b100000000100000 a
b100000000100000 F
b100000000100000 <"
b100 b
b10000000010000100 )
b10000000010000100 E"
b10000000010000100 G"
b100 G
b100 c
b100 D"
b100 s"
b1000 *
b1000 ^
b1000 B"
b1000 F"
b100 Y
b100 @"
b100 t"
b1 $
1!
1W
#75
0!
0W
#100
b1000 f
b10001000 h"
b10001000 S
b10001000 g"
b10001000 0
b10001000 >"
b10001000 e"
09"
b1001000000000000101000 K"
b10001000 ?"
b1100 M
b1100 L"
b1100 r"
b1001 z"
bz0000001001000000000000101000 T
b1001000000000000101000 q"
b10010000000000001010 p"
b1010 n"
b101000 U
b101000 C"
b101000 m"
b1010 V
b1010 k
b1010 l"
b1010 o"
b1000 ="
b0 h
b1001 j
b1000 P
b1000 x
b1000 O"
b100000 %#
10"
b0 X
b0 `
b0 u"
b1100 L
b1100 H"
b1100 J"
b100000000010010000000000001010 a
b100000000010010000000000001010 F
b100000000010010000000000001010 <"
b1000 b
b110000 )
b110000 E"
b110000 G"
b1000 G
b1000 c
b1000 D"
b1000 q
b1000 A
b1000 N"
b100000000100000 t
b100000000100000 D
b100000000100000 R"
b10 !"
b10 7
b10 %"
b1000 s"
b1100 *
b1100 ^
b1100 B"
b1100 F"
b1000 Y
b1000 @"
b1000 t"
b10 $
1!
1W
#125
0!
0W
#150
b111 f
b10000111 h"
b10000111 S
b10000111 g"
0"#
0-
b1010 ##
b1010 ,
b1010 v
b10000111 0
b10000111 >"
b10000111 e"
b1010 N
b1010 S"
b1010 !#
b0 K"
b10000111 ?"
b10000 M
b10000 L"
b10000 r"
1|"
14"
b1001 P
b1001 x
b1001 O"
08"
b1010 %#
b0 $#
1T"
0P"
b0 z"
bz0000000000000000000000000000 T
b0 q"
b0 p"
b0 n"
b0 U
b0 C"
b0 m"
b0 V
b0 k
b0 l"
b0 o"
b0 ="
b0 j
b10000 L
b10000 H"
b10000 J"
b10 )"
b10 K
b1000 }
b1000 4
b1000 $"
b1000 /"
b0 q
b0 A
b0 N"
b1001 s
b1001 C
b1001 2"
b1001 ;"
b1001 M"
b1010 t
b1010 D
b1010 R"
b1000 o
b1000 ?
b0 a
b0 F
b0 <"
b1100 b
b1100 )
b1100 E"
b1100 G"
b1100 G
b1100 c
b1100 D"
b1100 s"
b10000 *
b10000 ^
b10000 B"
b10000 F"
b1100 Y
b1100 @"
b1100 t"
b11 $
1!
1W
#175
0!
0W
#200
1"#
1-
b0 ##
b0 ,
b0 v
b10100 M
b10100 L"
b10100 r"
18"
19"
b0 P
b0 x
b0 O"
b0 N
b0 S"
b0 !#
b0 %#
b11 $#
0T"
1P"
b10100 L
b10100 H"
b10100 J"
b10000 b
b10000 )
b10000 E"
b10000 G"
b10000 G
b10000 c
b10000 D"
b0 s
b0 C
b0 2"
b0 ;"
b0 M"
b0 t
b0 D
b0 R"
b111 o
b111 ?
b1001 }
b1001 4
b1001 $"
b1001 /"
b1010 {
b0 1
b0 ""
b0 ."
b1010 3
b1010 #"
b1010 *"
b1010 ["
b1010 a"
b1000 '"
b1000 I
b1000 3"
b1000 v"
b10000 s"
b10100 *
b10100 ^
b10100 B"
b10100 F"
b10000 Y
b10000 @"
b10000 t"
b100 $
1!
1W
#225
0!
0W
#250
b11000 M
b11000 L"
b11000 r"
b1010 O
b1010 W"
b1010 \"
b1010 b"
b1010 w"
b11000 L
b11000 H"
b11000 J"
b1001 '"
b1001 I
b1001 3"
b1001 v"
b1010 &"
b1010 H
b1010 U"
b0 ("
b0 J
b0 V"
b0 }
b0 4
b0 $"
b0 /"
b0 {
b101 1
b101 ""
b101 ."
b0 3
b0 #"
b0 *"
b0 ["
b0 a"
b10100 b
b10100 )
b10100 E"
b10100 G"
b10100 G
b10100 c
b10100 D"
b10100 s"
b11000 *
b11000 ^
b11000 B"
b11000 F"
b10100 Y
b10100 @"
b10100 t"
b101 $
1!
1W
#275
0!
0W
#300
b11100 M
b11100 L"
b11100 r"
b0 O
b0 W"
b0 \"
b0 b"
b0 w"
b11100 L
b11100 H"
b11100 J"
b11000 b
b11000 )
b11000 E"
b11000 G"
b11000 G
b11000 c
b11000 D"
b0 '"
b0 I
b0 3"
b0 v"
b0 &"
b0 H
b0 U"
b101 ("
b101 J
b101 V"
b11000 s"
b11100 *
b11100 ^
b11100 B"
b11100 F"
b11000 Y
b11000 @"
b11000 t"
b110 $
1!
1W
#325
0!
0W
#350
b100000 M
b100000 L"
b100000 r"
b100000 L
b100000 H"
b100000 J"
b11100 b
b11100 )
b11100 E"
b11100 G"
b11100 G
b11100 c
b11100 D"
b11100 s"
b100000 *
b100000 ^
b100000 B"
b100000 F"
b11100 Y
b11100 @"
b11100 t"
b111 $
1!
1W
#375
0!
0W
#400
b100100 M
b100100 L"
b100100 r"
b100100 L
b100100 H"
b100100 J"
b100000 b
b100000 )
b100000 E"
b100000 G"
b100000 G
b100000 c
b100000 D"
b100000 s"
b100100 *
b100100 ^
b100100 B"
b100100 F"
b100000 Y
b100000 @"
b100000 t"
b1000 $
1!
1W
#425
0!
0W
#450
b101000 M
b101000 L"
b101000 r"
b101000 L
b101000 H"
b101000 J"
b100100 b
b100100 )
b100100 E"
b100100 G"
b100100 G
b100100 c
b100100 D"
b100100 s"
b101000 *
b101000 ^
b101000 B"
b101000 F"
b100100 Y
b100100 @"
b100100 t"
b1001 $
1!
1W
#475
0!
0W
#500
b101100 M
b101100 L"
b101100 r"
b101100 L
b101100 H"
b101100 J"
b101000 b
b101000 )
b101000 E"
b101000 G"
b101000 G
b101000 c
b101000 D"
b101000 s"
b101100 *
b101100 ^
b101100 B"
b101100 F"
b101000 Y
b101000 @"
b101000 t"
b1010 $
1!
1W
#525
0!
0W
